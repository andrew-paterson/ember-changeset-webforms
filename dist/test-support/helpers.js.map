{"version":3,"file":"helpers.js","sources":["../../src/test-support/helpers.js"],"sourcesContent":["import { find, findAll, click, waitUntil } from '@ember/test-helpers';\nimport els from './element-selectors';\nimport { camelize } from '@ember/string';\n\nexport default {\n  fieldErrorText(arg) {\n    const element = this.getElement(arg);\n    const errors = element.querySelectorAll(els.cwfFieldError);\n    if (!errors) {\n      return;\n    }\n    return Array.from(errors).map((error) => error.textContent.trim());\n  },\n\n  getElement(arg) {\n    let element;\n    if (typeof arg === 'string') {\n      element = find(arg);\n      if (!element) {\n        throw `No element with selector ${arg} was found`;\n      }\n    } else {\n      element = arg;\n    }\n    return element;\n  },\n\n  getElements(arg, indexes) {\n    let elements;\n    if (typeof arg === 'string') {\n      elements = findAll(arg);\n    } else {\n      elements = arg;\n    }\n    if (indexes) {\n      elements = indexes.map((index) => elements[index]);\n    }\n    return elements;\n  },\n\n  async waitForMs(ms) {\n    const startTimeEpoch = Date.now();\n    await waitUntil(\n      function () {\n        return Date.now() - startTimeEpoch > ms;\n      },\n      { timeout: ms + 1000 },\n    );\n    return;\n  },\n\n  async passedValidation(arg, assert, opts = {}) {\n    const element = this.getElement(arg);\n    const validBackgroundImage = `url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e\")`;\n    const validBorderColour = 'rgb(25, 135, 84)';\n    const validClass = 'is-valid';\n    const invalidClass = 'is-invalid';\n    await this.waitForMs(200);\n    const validatingElement =\n      element.querySelector('.form-control') ||\n      element.querySelector('.form-check-input');\n\n    const validatingElementType = element.querySelector('.form-control')\n      ? 'control'\n      : 'check';\n\n    const validatingElementCSS = window.getComputedStyle(\n      validatingElement,\n      null,\n    );\n    if (assert) {\n      assert\n        .dom(validatingElement)\n        .hasClass(\n          validClass,\n          `Form ${validatingElementType} element has class '${validClass}' => ${opts.assertionSuffix}`,\n        );\n      assert\n        .dom(validatingElement)\n        .doesNotHaveClass(\n          invalidClass,\n          `[Field passed validation] Form ${validatingElementType} element does not have class '${invalidClass}' => ${opts.assertionSuffix}`,\n        );\n      assert.strictEqual(\n        validBorderColour,\n        validatingElementCSS.getPropertyValue('border-color'),\n        `[Field passed validation] Form ${validatingElementType} element has valid border colour => ${opts.assertionSuffix}`,\n      );\n      if (validatingElementType === 'control') {\n        assert.strictEqual(\n          validBackgroundImage,\n          validatingElementCSS.getPropertyValue('background-image'),\n          `[Field passed validation] Form ${validatingElementType} element has valid background image => ${opts.assertionSuffix}`,\n        );\n      }\n      if (validatingElementType === 'check') {\n        assert.strictEqual(\n          validBorderColour,\n          validatingElementCSS.getPropertyValue('background-color'),\n          `[Field passed validation] Form ${validatingElementType} element has valid background colour => ${opts.assertionSuffix}`,\n        );\n      }\n    }\n    if (\n      validatingElement.classList.contains('is-valid') &&\n      validatingElementCSS.getPropertyValue('border-color') ===\n        validBorderColour &&\n      validatingElementCSS.getPropertyValue('background-image') ===\n        validBackgroundImage\n    ) {\n      return true;\n    }\n    return false;\n  },\n\n  async failedValidation(arg, assert, opts = {}) {\n    const element = this.getElement(arg);\n    const invalidBackgroundImage = `url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e\")`;\n    const invalidBorderColour = 'rgb(220, 53, 69)';\n    const validClass = 'is-valid';\n    const invalidClass = 'is-invalid';\n    await this.waitForMs(200);\n    const validatingElement =\n      element.querySelector('.form-control') ||\n      element.querySelector('.form-check-input');\n\n    const validatingElementType = element.querySelector('.form-control')\n      ? 'control'\n      : 'check';\n    const validatingElementCSS = window.getComputedStyle(\n      validatingElement,\n      null,\n    );\n    if (assert) {\n      assert\n        .dom(validatingElement)\n        .hasClass(\n          invalidClass,\n          `[Field failed validation] Form ${validatingElementType} element has class '${invalidClass}' => ${opts.assertionSuffix}`,\n        );\n      assert\n        .dom(validatingElement)\n        .doesNotHaveClass(\n          validClass,\n          `[Field failed validation] Form ${validatingElementType} element does not have class '${validClass}' => ${opts.assertionSuffix}`,\n        );\n      assert.strictEqual(\n        invalidBorderColour,\n        validatingElementCSS.getPropertyValue('border-color'),\n        `[Field failed validation] Form ${validatingElementType} element has invalid border colour => ${opts.assertionSuffix}`,\n      );\n      if (validatingElementType === 'control') {\n        assert.strictEqual(\n          invalidBackgroundImage,\n          validatingElementCSS.getPropertyValue('background-image'),\n          `[Field failed validation] Form ${validatingElementType} element has invalid background image => ${opts.assertionSuffix}`,\n        );\n      }\n      if (validatingElementType === 'check') {\n        assert.strictEqual(\n          invalidBorderColour,\n          validatingElementCSS.getPropertyValue('background-color'),\n          `[Field failed validation] Form ${validatingElementType} element has invalid background colour => ${opts.assertionSuffix}`,\n        );\n      }\n    }\n    if (\n      validatingElement.classList.contains(invalidClass) &&\n      element.querySelector(els.cwfFieldErrors) &&\n      validatingElementCSS.getPropertyValue('border-color') ===\n        invalidBorderColour &&\n      validatingElementCSS.getPropertyValue('background-image') ===\n        invalidBackgroundImage\n    ) {\n      return true;\n    }\n    return false;\n  },\n\n  async allPassedValidation(arg, indexes) {\n    const elements = this.getElements(arg, indexes);\n    let allPassed = true;\n    for (var el of elements) {\n      if (!(await this.passedValidation(el))) {\n        allPassed = false;\n      }\n    }\n    return allPassed;\n  },\n\n  async allFailedValidation(arg, indexes) {\n    const elements = this.getElements(arg, indexes);\n    let allFailed = true;\n    for (var el of elements) {\n      if (!(await this.failedValidation(el))) {\n        allFailed = false;\n      }\n    }\n    return allFailed;\n  },\n\n  async wasValidated(arg) {\n    return (\n      (await this.passedValidation(arg)) || (await this.failedValidation(arg))\n    );\n  },\n\n  async allValidated(arg, indexes) {\n    const els = this.getElements(arg, indexes);\n    for (var el of els) {\n      if (!(await this.wasValidated(el))) {\n        return false;\n      }\n    }\n    return true;\n  },\n\n  async noneValidated(arg, indexes) {\n    const els = this.getElements(arg, indexes);\n    for (var el of els) {\n      if (await this.wasValidated(el)) {\n        return false;\n      }\n    }\n    return true;\n  },\n\n  async removeClone(arg, indexes) {\n    const element = this.getElement(arg);\n    if (indexes) {\n      const elementsToClick = indexes.map(\n        (index) => element.querySelectorAll(els.cwfRemoveClone)[index],\n      );\n      for (var el of elementsToClick) {\n        await click(el);\n      }\n    } else {\n      await click(element.querySelector(els.cwfRemoveClone));\n    }\n  },\n\n  async addClone(arg) {\n    const element = this.getElement(arg);\n    await click(element.querySelector(els.cwfAddClone));\n  },\n\n  async submitForm(arg) {\n    const element = this.getElement(arg);\n    await click(element.querySelector(els.cwfSubmitButton));\n  },\n\n  removeExtraSpaces(string, whiteSpaceReplacement = ' ') {\n    string = string.trim();\n    string = string\n      .replace(/\\s\\s+/g, whiteSpaceReplacement)\n      .replace(/\\r?\\n|\\r/g, whiteSpaceReplacement);\n    return string;\n  },\n\n  changesetWebformStateAsJSON(parentSelector, customTransforms) {\n    const formElement = find(parentSelector);\n    return Array.from(\n      formElement.querySelectorAll('[data-test-cwf-field]'),\n    ).map((el) => {\n      const obj = {\n        name: el.getAttribute('data-test-id'),\n        fieldType: el\n          .getAttribute('data-test-class')\n          .replace('cwf-field-type-', ''),\n      };\n      obj.validationStatus = validationStatus(el);\n      const inputSelector = 'input:not([type=checkbox]):not([type=radio])';\n      const input = el.querySelector(inputSelector);\n      if (input) {\n        obj.inputText = input.value;\n        if (el.querySelector(`${inputSelector}:placeholder-shown`)) {\n          obj.placeholder = input.getAttribute('placeholder');\n        }\n      }\n      if (el.querySelector('[data-test-class=\"cwf-field-label\"]')) {\n        obj.label = this.removeExtraSpaces(\n          el.querySelector('[data-test-class=\"cwf-field-label\"]').textContent,\n        );\n      }\n      ['radio-button', 'checkbox'].forEach((elType) => {\n        if (obj.fieldType === `${elType}-group`) {\n          const items = Array.from(\n            el.querySelectorAll(`[data-test-labelled-${elType}]`),\n          ).map((item) => {\n            return {\n              label: this.removeExtraSpaces(\n                item.querySelector('label').textContent,\n              ),\n              checked: item.querySelector(\n                `input[type=\"${elType.replace('-button', '')}\"]`,\n              ).checked,\n            };\n          });\n          obj[camelize(`${elType}-options`)] = {\n            items: items,\n          };\n        }\n        if (customTransforms) {\n          customTransforms(el, obj);\n        }\n      });\n      if (obj.fieldType === 'single-checkbox') {\n        obj[camelize(obj.fieldType)] = {\n          label: el.querySelector('label').textContent.trim(), // TODO better selector for this.\n          checked: el.querySelector('input[type=\"checkbox\"]').checked,\n        };\n      }\n      if (['power-select', 'power-select-checkboxes'].includes(obj.fieldType)) {\n        const elObject = {\n          label: this.removeExtraSpaces(\n            el.querySelector('[data-test-class=\"cwf-field-label\"]').textContent,\n          ),\n        };\n        if (el.querySelector('.ember-power-select-placeholder')) {\n          elObject.placeholder = this.removeExtraSpaces(\n            el.querySelector('.ember-power-select-placeholder').textContent,\n          );\n        }\n        if (el.querySelector('.ember-power-select-selected-item')) {\n          elObject.selectedItemText = this.removeExtraSpaces(\n            el.querySelector('.ember-power-select-selected-item').textContent,\n          );\n        }\n        obj[camelize(obj.fieldType)] = elObject;\n      }\n      return obj;\n    });\n  },\n};\n\nfunction validationStatus(el) {\n  if (!el.hasAttribute('data-test-validates')) {\n    return 'not-applicable';\n  }\n  if (!el.hasAttribute('data-test-was-validated')) {\n    return 'not-validated';\n  }\n  return el.getAttribute('data-test-validation-status');\n}\n"],"names":["fieldErrorText","arg","element","getElement","errors","querySelectorAll","els","cwfFieldError","Array","from","map","error","textContent","trim","find","getElements","indexes","elements","findAll","index","waitForMs","ms","startTimeEpoch","Date","now","waitUntil","timeout","passedValidation","assert","opts","validBackgroundImage","validBorderColour","validClass","invalidClass","validatingElement","querySelector","validatingElementType","validatingElementCSS","window","getComputedStyle","dom","hasClass","assertionSuffix","doesNotHaveClass","strictEqual","getPropertyValue","classList","contains","failedValidation","invalidBackgroundImage","invalidBorderColour","cwfFieldErrors","allPassedValidation","allPassed","el","allFailedValidation","allFailed","wasValidated","allValidated","noneValidated","removeClone","elementsToClick","cwfRemoveClone","click","addClone","cwfAddClone","submitForm","cwfSubmitButton","removeExtraSpaces","string","whiteSpaceReplacement","replace","changesetWebformStateAsJSON","parentSelector","customTransforms","formElement","obj","name","getAttribute","fieldType","validationStatus","inputSelector","input","inputText","value","placeholder","label","forEach","elType","items","item","checked","camelize","includes","elObject","selectedItemText","hasAttribute"],"mappings":"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"}