{"version":3,"file":"dynamic-class-names.js","sources":["../../src/utils/dynamic-class-names.js"],"sourcesContent":["import _mergeWith from 'lodash.mergewith';\nimport mergeWithDefaultClassNames from './merge-with-default-class-names';\n\nexport default function dynamicClassNames(\n  elementTypesString,\n  changesetWebform,\n  formField,\n) {\n  let classNames = [];\n  if (!changesetWebform) {\n    return;\n  }\n\n  const elementTypes = elementTypesString.split(',');\n  elementTypes.forEach((elementType) => {\n    let classNameSettings =\n      changesetWebform.formSchemaWithDefaults.classNameSettings;\n    if (formField && (formField.classNames || {})[elementType]) {\n      const objToMerge = {};\n      objToMerge[elementType] = formField.classNames[elementType] || [];\n      classNameSettings = _mergeWith(\n        {},\n        classNameSettings,\n        objToMerge,\n        mergeWithDefaultClassNames,\n      );\n    }\n    let classNamesArray;\n    if (typeof classNameSettings[elementType] === 'function') {\n      classNamesArray =\n        classNameSettings[elementType](\n          classNameSettings,\n          changesetWebform,\n          formField,\n        ) || [];\n    } else {\n      classNamesArray = classNameSettings[elementType] || [];\n    }\n    if (formField && classNamesArray.indexOf('$validationClassNames') > -1) {\n      if (formField.validationStatus === 'valid') {\n        classNames = classNames.concat(classNameSettings.validClassNames || []);\n      } else if (formField.validationStatus === 'invalid') {\n        classNames = classNames.concat(\n          classNameSettings.invalidClassNames || [],\n        );\n      }\n    }\n    classNames = classNames.concat(classNamesArray);\n  });\n  return classNames.filter((className) => !className.startsWith('$')).join(' ');\n}\n"],"names":["dynamicClassNames","elementTypesString","changesetWebform","formField","classNames","elementTypes","split","forEach","elementType","classNameSettings","formSchemaWithDefaults","objToMerge","_mergeWith","mergeWithDefaultClassNames","classNamesArray","indexOf","validationStatus","concat","validClassNames","invalidClassNames","filter","className","startsWith","join"],"mappings":";;;AAGe,SAASA,iBAAiBA,CACvCC,kBAAkB,EAClBC,gBAAgB,EAChBC,SAAS,EACT;EACA,IAAIC,UAAU,GAAG,EAAE;EACnB,IAAI,CAACF,gBAAgB,EAAE;AACrB,IAAA;AACF;AAEA,EAAA,MAAMG,YAAY,GAAGJ,kBAAkB,CAACK,KAAK,CAAC,GAAG,CAAC;AAClDD,EAAAA,YAAY,CAACE,OAAO,CAAEC,WAAW,IAAK;AACpC,IAAA,IAAIC,iBAAiB,GACnBP,gBAAgB,CAACQ,sBAAsB,CAACD,iBAAiB;AAC3D,IAAA,IAAIN,SAAS,IAAI,CAACA,SAAS,CAACC,UAAU,IAAI,EAAE,EAAEI,WAAW,CAAC,EAAE;MAC1D,MAAMG,UAAU,GAAG,EAAE;MACrBA,UAAU,CAACH,WAAW,CAAC,GAAGL,SAAS,CAACC,UAAU,CAACI,WAAW,CAAC,IAAI,EAAE;MACjEC,iBAAiB,GAAGG,UAAU,CAC5B,EAAE,EACFH,iBAAiB,EACjBE,UAAU,EACVE,0BACF,CAAC;AACH;AACA,IAAA,IAAIC,eAAe;AACnB,IAAA,IAAI,OAAOL,iBAAiB,CAACD,WAAW,CAAC,KAAK,UAAU,EAAE;AACxDM,MAAAA,eAAe,GACbL,iBAAiB,CAACD,WAAW,CAAC,CAC5BC,iBAAiB,EACjBP,gBAAgB,EAChBC,SACF,CAAC,IAAI,EAAE;AACX,KAAC,MAAM;AACLW,MAAAA,eAAe,GAAGL,iBAAiB,CAACD,WAAW,CAAC,IAAI,EAAE;AACxD;IACA,IAAIL,SAAS,IAAIW,eAAe,CAACC,OAAO,CAAC,uBAAuB,CAAC,GAAG,EAAE,EAAE;AACtE,MAAA,IAAIZ,SAAS,CAACa,gBAAgB,KAAK,OAAO,EAAE;QAC1CZ,UAAU,GAAGA,UAAU,CAACa,MAAM,CAACR,iBAAiB,CAACS,eAAe,IAAI,EAAE,CAAC;AACzE,OAAC,MAAM,IAAIf,SAAS,CAACa,gBAAgB,KAAK,SAAS,EAAE;QACnDZ,UAAU,GAAGA,UAAU,CAACa,MAAM,CAC5BR,iBAAiB,CAACU,iBAAiB,IAAI,EACzC,CAAC;AACH;AACF;AACAf,IAAAA,UAAU,GAAGA,UAAU,CAACa,MAAM,CAACH,eAAe,CAAC;AACjD,GAAC,CAAC;AACF,EAAA,OAAOV,UAAU,CAACgB,MAAM,CAAEC,SAAS,IAAK,CAACA,SAAS,CAACC,UAAU,CAAC,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;AAC/E;;;;"}